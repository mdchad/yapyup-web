create schema if not exists rbac;

create table if not exists rbac.role (
  "id" bigint generated by default as identity not null PRIMARY KEY,
  "name" text not null
);

alter table rbac.role enable row level security;

create policy "Enable read access for all users" on rbac.role
for select
to public
using (true);

create table if not exists rbac.permission (
  "id" bigint generated by default as identity not null PRIMARY KEY,
  "name" text not null
);

alter table rbac.permission enable row level security;

create policy "Enable read access for all users" on rbac.permission
for select
to public
using (true);

create table if not exists rbac.role_permission (
  "role_id" bigint not null REFERENCES rbac.role(id) ON UPDATE CASCADE ON DELETE CASCADE,
  "permission_id" bigint not null REFERENCES rbac.permission(id) ON UPDATE CASCADE ON DELETE CASCADE,
  PRIMARY KEY(role_id, permission_id)
);

alter table rbac.role_permission enable row level security;

create policy "Enable read access for all users" on rbac.role_permission
for select
to public
using (true);

create table if not exists rbac.user_role (
  "user_id" uuid not null REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE,
  "role_id" bigint not null REFERENCES rbac.role(id) ON UPDATE CASCADE ON DELETE CASCADE,
  PRIMARY KEY(user_id, role_id)
);

alter table rbac.user_role enable row level security;

create policy "Enable read access for all users" on rbac.user_role
for select
to public
using (true);