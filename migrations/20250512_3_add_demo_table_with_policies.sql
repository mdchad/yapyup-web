create table if not exists public.posts (
  "id" bigint generated by default as identity not null PRIMARY KEY,
  "title" text not null,
  "created_at" timestamp with time zone not null default now()
);
alter table public.posts enable row level security;

create policy "Enable read access for users with a read permission" on public.posts
for select
to public
using (
  exists (
    select 1
    from get_user_permissions(auth.uid()) as up
    where up.permission = 'READ_POSTS'
  )
);

create policy "Enable insert access for users with a create permission" on public.posts
for insert
to public
with check (
  exists (
    select 1
    from get_user_permissions(auth.uid()) as up
    where up.permission = 'CREATE_POSTS'
  )
);

create policy "Enable update access for users with an update permission" on public.posts
for update
to public
using (
  exists (
    select 1
    from get_user_permissions(auth.uid()) as up
    where up.permission = 'UPDATE_POSTS'
  )
)
with check (
  exists (
    select 1
    from get_user_permissions(auth.uid()) as up
    where up.permission = 'UPDATE_POSTS'
  )
);

create policy "Enable delete access for users with a delete permission" on public.posts
for delete
to public
using (
  exists (
    select 1
    from get_user_permissions(auth.uid()) as up
    where up.permission = 'DELETE_POSTS'
  )
);